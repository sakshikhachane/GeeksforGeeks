=> Sq.root(3) = 1.73
OAOAHH || HHOAOA

Time Complexity:
1. Trees:
	AVL tree: O(h) but it is balanced hence O(logN)
	Traversal (inorder,postorder,preorder) - O(N)


=>Red-Black Tree and AVL (when to used):
  If there are less insertion and deletion and you have to search then use AVL.
  If there are more insertion and deletion then use Red-Black tree.

=> Can we use duplicates in BST?
  Yes, BST bascially consists of distinct keys, but you can use duplicates. It is handled in two ways. Keep duplicate elements on the right handside.
   	  12
       /     \
     10      20
    /  \     /
   9   11   12 
      /      \
    10       12

  A Better Solution is to augment every tree node to store count together with regular fields like key, left and right pointers. 
  It is better as height will be less and insertion and deletion will be less painful and also benefits the AVL and Red-Black Tree.
          12(3)
       /        \
     10(2)      20(1)
    /    \       
 9(1)   11(1)  


=> Applications of Trees:
   1. Store hierarchical data, like folder structure, organization structure, XML/HTML data.
   2. Binary Search Tree is a tree that allows fast search, insert, delete on a sorted data. It also allows finding closest item
   3. Heap is a tree data structure which is implemented using arrays and used to implement priority queues.
   4. B-Tree and B+ Tree : They are used to implement indexing in databases.
   5. Syntax Tree: Used in Compilers.
   6. K-D Tree: A space partitioning tree used to organize points in K dimensional space.
   7. Trie : Used to implement dictionaries with prefix lookup.
   8. Suffix Tree : For quick pattern searching in a fixed text.
   9. Spanning Trees and shortest path trees are used in routers and bridges respectively in computer networks
   10. As a workflow for compositing digital images for visual effects.
  
  
=> Infix to Postfix:
   Scan left to right (print operands when detected and push operator if the precedence of the operator at top is less than the incoming operator
       else pop till the precendence of incoming operarator is greater than the top of the stack)

=> Infix to prefix:
   Way1:
   Reverse the expression. Obtain the postfix of reversed expression. Again reverse the postfix expression obtained.

=> Prefix to infix:
   Scan expression from right to left. If operand then push it onto stack and if operator pop the two elements (top of the stack) 
       and push (op1 operator op2) into the stack.

=> Postfix to infix:
   Scan expression left to right. If operand then push it onto stack and if operator pop the two elements (top of the stack) 
       and push (op1 operator op2) into the stack. 

=> TreeSet:
   1. A TreeSet sorts the data in ascending order that is inserted in it.
   2. A TreeSet does not contain any duplicate element as it is a set.


=> Constructors:
   1. Constructors cannot be enclosed in try/catch block.

=> Garbage Collector:
   Garbage collector has function called finalize which is called before the garbage collector picks up object.
   But it has to be some class object else it won't function.

=> Inheritance:
   1. If Derieved d=new Derieved() is called then it will first call the base class constructor then derieved class contructor.
   2. If Base b=new Derieved() is called then it will call the overidden functions of derieved class only but if fun is a function which is static in base class then that function will only get called even if you have overridden it in derieved class
   3. If Base b=new Derieved() is called and if function in base class is final then it can't be overidden and is a compilation error.
   4. If Derieved d=new Derieved() is called and the function in base class is public then it must be public in the derieved class.
   5. If Derieved d=new Derieved() is called and the function in base class is private then it can be anything in the derieved class acess specifier(public,private,protected).
   6. the method multiplier is marked as private, it isnâ€™t inherited and therefore is not visible to the Derived
   
=> Try-catch:
   1. finally block will not be executed if program exits by calling System.exit();

=> Static:
   1. A non-static variable can not be accessed in static nested inner class.

=> Thread:
   1. The Thread.start() method always starts a new thread, and the entry point for this thread is the run() method. If you are calling run() directly it will execute in the same thread BUT it is always recommendable logically
   calling Thread.start() to start a new thread of execution followed by the run() method.