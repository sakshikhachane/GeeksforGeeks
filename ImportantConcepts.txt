=> Comparison using Comparator:
    Collections.sort(arr, new Comparator<String>(){ 
        @Override
        public int compare(String X, String Y) { 
        String XY=X + Y; 
        String YX=Y + X; 
        return XY.compareTo(YX) > 0 ? -1:1; 
    } 
    }); 

 In class:
 class CustomerSortingComparator implements Comparator<Student> { 
        @Override
        public int compare(Student customer1, Student customer2) { 
  
        } 
    } 

=> Integer to String Conversion:
   a. String str1 = Integer.toString(a);   //Using toString()
   b. String str3 = String.valueOf(c);     //Using String.valueOf()
   c. String str4 = new Integer(d).toString(); //Using Integer().toString()
   d. DecimalFormat df = new DecimalFormat("#,###");  //Using decimal Format
      String Str5 = df.format(e);  

=> String to integer conversion:
   a. int decimalExample = Integer.parseInt("20"); // Integer.parseInt()
   b. int inum = Integer.valueOf(str);     //Integer.valueOf()

=> String to StringBuffer and StringBuilder:
   a.StringBuffer sbr = new StringBuffer(str); 
     StringBuilder sbl = new StringBuilder(str);

=> StringBuffer, StringBuilder to String:
   a. StringBuffer sb = new StringBuffer("beginnersbook");
      String str = sb.toString();
   b. StringBuilder sbdr = new StringBuilder(str);
      String str1 = sbdr.toString(); 

=> Convert String to Array:
   str[]=s.toCharArray();

=> Convert array to String:
   str[]=s.toCharArray();
   String.ValueOf(str);

=> Convert string to lowercase:
   s[i] = Character.toLowerCase(s[i]); 

=> To check whether string consists of particular string or character:
   String str = "Game of Thrones";  
   System.out.println(str.contains("Game"));

=> To replace character in the String:
   String replaceString=s1.replace('a','e');   --To replace only one character
   String replaceString=s1.replaceAll("is","was");
   String replaceString=s1.replaceAll("\\s","");    --To remove whitespace

=> Joining the words by some character to make string:
   String joinString1=String.join("-","welcome","to","javatpoint");  //welcome-to-javapoint

=> To check if the string ends with particular character or word:
   String s1="java by javatpoint";  
   System.out.println(s1.endsWith("t"));      //true
   System.out.println(s1.endsWith("point"));  //true

=> To check if the character is digit of not:
   if (Character.isDigit(s.charAt(i)) == false)  
   
   Same for isAlphabet()

=> String from characters: 
   String(char[] char_array, int start_index, int count) – Allocates a String from a given character array but choose count characters from the start_index.
   Example:
   char char_arr[] = {'G', 'e', 'e', 'k', 's'};
   String s = new String(char_arr , 1, 3); //eek

=>String concat( String str): Concatenates specified string to the end of this string.
  String s1 = ”Geeks”;
  String s2 = ”forGeeks”;
  String output = s1.concat(s2); // returns “GeeksforGeeks”

=>int indexOf (String s): Returns the index within the string of the first occurrence of the specified string.
  String s = ”Learn Share Learn”;
  int output = s.indexOf(“Share”); // returns 6

=>int indexOf (String s, int i): Returns the index within the string of the first occurrence of the specified string, starting at the specified index.
  String s = ”Learn Share Learn”;
  int output = s.indexOf("ea",3);// returns 13

=>Int lastIndexOf( String s): Returns the index within the string of the last occurrence of the specified string.
  String s = ”Learn Share Learn”;
  int output = s.lastIndexOf("a"); // returns 14

=> Convert number into binary number:
   String binaryString = Integer.toBinaryString(h); 

=> Convert number into octal number:
   String octalString = Integer.toOctalString(i); 

=> Convert number into hexadecimal number:
    String hexString = Integer.toHexString(j);

=> Convert number into custom based system:
   String customString = Integer.toString(k, 7); //7-based number

=> XOR of a number:  
   *) 1^1 = 0 and 0^0= 0
   a. (x | y) - (x & y)


=> Iterator for HashMap:
   Iterator itr = h.entrySet().iterator();  
        while (hmIterator.hasNext()) { 
            Map.Entry element = (Map.Entry)itr.next(); 
            int marks = (int)element.getValue(); 
            System.out.println(element.getKey()); 
        } 

=> ASCII values:
   'A' - 65  and 'Z' - 90
   'a' - 97  and 'z' - 122

=> List of list assign:
    List<List<Integer>> list = new ArrayList<>();
        for(int i=0;i<n;i++)
        {
            list.add(new ArrayList<Integer>());
        }

=> Make array of arraylist:
    ArrayList<Integer>[] al = new ArrayList[n]; 
  
        // initializing 
        for (int i = 0; i < n; i++) { 
            al[i] = new ArrayList<Integer>(); 
        } 

=> Sort the array on the basis of what you want using comparator:
   import java.util.*;

class Player {
	String name;
	int score;

	Player(String name, int score) {
		this.name = name;
		this.score = score;
	}
}

class Checker implements Comparator<Player> {
	public int compare(Player a, Player b) {

        if(a.score>b.score)
        {
            return -1;
        }
        else if(a.score<b.score)
        {
            return 1;
        }
        else
        {
            if((a.name).compareTo(b.name)<1)
            {
                return -1;
            }
            else
            {
                return 1;
            }
        }
    
    }
}


public class Solution {

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();

        Player[] player = new Player[n];
        Checker checker = new Checker();
        
        for(int i = 0; i < n; i++){
            player[i] = new Player(scan.next(), scan.nextInt());
        }
        scan.close();

        Arrays.sort(player, checker);
        for(int i = 0; i < player.length; i++){
            System.out.printf("%s %s\n", player[i].name, player[i].score);
        }
    }
}


Here Arrays.sort(array_to_be_sorted,function_implementing comparator)

=> Arrays.copyOfRange():   //copy one array to another
   public static int[] copyOfRange(int[] original, int from, int to)
   eg.
     int[] arr2 = Arrays.copyOfRange(arr1, 2, 6);

=> In Strings mostly :
    int alphabets[]=new int[26];  //convert into lower case using toLowerCase()
    alphabets[a.charAt(i)-'a']--;

=> StringBuffer remove character:
   str.deleteCharAt(i);
   str.delete(start,end);

=>Compare characters using StringBuffer:
   str.charAt(i)==str.charAt(i+1)


=>Split method in java:
  This method don't work for java if s.split(".") is written
  Thus write s.split("//.") for full stop
  
  To split string:
  String arr[]=s.split("//.");
  
  *****To join array into string:
  String str= String.join(".",arr);
